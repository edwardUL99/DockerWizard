#!/usr/bin/env python

"""
Provides the functionality to capture args and return expected output
"""
from typing import List
import sys
import os

import yaml

BASENAME = os.path.basename(__file__).upper()
ARGS = f'MOCK_PROGRAM_ARGS_{BASENAME}'
OUTPUT = f'MOCK_PROGRAM_OUTPUT_{BASENAME}'

# these will get substituted by mockproggen.py if provided in arguments
PARSED_ARGS = "build --tag image ."
PARSED_OUTPUT = "docker built"
TEST = "run_build_tool"


def _normalize(split: List[str]):
    if len(split) > 1:
        return split
    else:
        if split[0] == '':
            return []
        else:
            return split


def get_args():
    env_value = os.environ.get(ARGS)
    value = env_value if env_value else (None if PARSED_ARGS == "$ARGS" else PARSED_ARGS)

    if value:
        return [_normalize(v1) for v1 in (v.strip().split(' ') for v in value.split('|'))]
    else:
        return []


def get_program_output():
    env_value = os.environ.get(OUTPUT)
    value = env_value if env_value else (None if PARSED_OUTPUT == "$OUTPUT" else PARSED_OUTPUT)

    if value:
        return [v.strip() if v != '' else None for v in value.split('|')]
    else:
        return []


def _write_envs():
    """
    Writes the environment variables the program was called with to yaml file
    """
    file = os.path.join(os.environ.get('DOCKER_WIZARD_HOME'), 'dockerwizard', 'tests', TEST,  f'{BASENAME}_envs.yaml')

    with open(file, 'w') as f:
        yaml.safe_dump(dict(os.environ), f)


def execute(expected_args_list: List[List[str]], output: List[str]):
    """
    Mock an execution of the program checking the received args against the expected_args and if they match,
    return the provided output
    :param expected_args_list: The list of all possible args expected separated by |
    :param output: expected output to return.
    """
    _write_envs()
    args = sys.argv[1:]

    if expected_args_list == [] and args == []:
        sys.exit(0)

    for i, expected_args in enumerate(expected_args_list):
        if args == expected_args or expected_args == ['*']:
            if i < len(output) and output[i]:
                print(output[i])

            sys.exit(0)

    print(f'MOCK PROGRAM ERROR: ARGS {args} DO NOT MATCH any expected args in {expected_args_list}', file=sys.stderr)
    sys.exit(1)


if __name__ == '__main__':
    execute(get_args(), get_program_output())
