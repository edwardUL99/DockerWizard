# A build object is identified by the build tag
build:
  # image represents the tag name of the resulting Docker image
  image: 'hello-world-docker-build'
  # file object representing dockerfile
  dockerfile:
    path: 'Dockerfile'
  # specifies a path to where files should be retrieved from when relative to file library
  library: 'files'
  custom_commands: 'custom-commands.yaml'
  # list of file objects to copy to build directory
  files:
    - path: 'hello-world.py'
    # can also define absolute path (same with dockerfile)
    # - path: '/absolute/path/to/file'
    #   relative_to_library: false
    - path: 'set-message.sh'
  # steps to execute before building the docker image
  steps:
    # steps are executed with build directory as the working directory
    # after each step executes, the working directory is reset to the build directory
    - name: 'Set message environment variable'
      command: 'set-variable'
      arguments:
        - 'MESSAGE'
        - 'Hello World from the sample DockerBuild build file'
    - name: 'Set multiple variables to demonstrate set-variables command'
      command: 'set-variables'
      arguments:
        - 'key1=this is a value'
        - 'key2=this is another value'
    - name: 'Print variables to verify variables are set'
      command: 'execute-shell'
      arguments:
        - 'echo'
        - '"Value of key1 is: $key1"'
        - '&&'
        - 'echo'
        - '"Value of key2 is: $key2"'
    - name: 'Generate message.txt using set-message.sh'
      command: 'execute-shell'
      named:
        key: 'value'
      arguments:
        - 'bash' # if Windows, the framework will try to resolve bash to a bash emulator either through WSL or set with DOCKER_WIZARD_BASH_PATH env variable
        - 'set-message.sh'
    - name: 'View contents of build directory after build'
      command: 'execute-shell'
      # execute-shell does not use named arguments but is a demonstration of how to use them. Any validation is to be
      # done by the implementing command as only positional arguments can be validated for number of arguments required
      # etc. Currently implemented should a custom command needs the concept of key-value arguments. The step object
      # can be accessed through self.build_context.current_step in the command execute method
      named:
        key: 'value'
        purpose: 'Allows named arguments'
      arguments:
        - 'ls'
        - '-al'
    # after steps complete, the framework will run docker build
  post:
    # optional steps to run after successful docker build
    - name: 'Create a container from the built image'
      command: 'create-container'
      arguments:
        - 'hello-world'
        - 'hello-world-docker-build'